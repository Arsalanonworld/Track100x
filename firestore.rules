/**
 * @fileoverview Firestore Security Rules for Tack100x Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access to leaderboard and whale feed data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   read or write their own profile.
 * - /users/{userId}/alerts/{alertId}: Stores user-defined alerts. Only the
 *   authenticated user can manage alerts under their own profile.
 * - /users/{userId}/watchlist/{walletId}: Stores wallets followed by a user.
 *   Only the authenticated user can manage watchlist items under their own profile.
 * - /leaderboard/{leaderboardEntryId}: Stores public leaderboard data.
 *   Anyone can read this data. Writes are not permitted in this prototyping phase.
 * - /whaleFeed/{whaleTransactionId}: Stores public whale feed data. Anyone
 *   can read this data. Writes are not permitted in this prototyping phase.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed for privacy.
 * - Public read access is granted to the leaderboard and whale feed.
 * - In this prototyping phase, data validation is omitted for faster
 *   iteration. However, ownership is strictly enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == resource.data.userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      // Allow the user to create their own profile if the userId matches their auth.uid
      allow create: if isOwner(userId);

      // Allow the user to update or delete their own profile
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user-defined alerts.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Restricts access to a user's own alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == resource.data.userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

      /**
       * @description Controls access to user's watchlist.
       * @path /users/{userId}/watchlist/{walletId}
       * @allow (get, create, update, delete) if the user is the owner.
       * @deny (get, create, update, delete) if the user is not the owner.
       * @principle Restricts access to a user's own watchlist.
       */
      match /users/{userId}/watchlist/{walletId} {
          // Helper function to check if the user is signed in
          function isSignedIn() {
              return request.auth != null;
          }

          // Helper function to check if the user is the owner of the document
          function isOwner(userId) {
              return request.auth.uid == userId;
          }

          // Helper function to check if the user is the existing owner of the document
          function isExistingOwner(userId) {
              return request.auth.uid == resource.data.userId;
          }

          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
      }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardEntryId}
     * @allow (get, list) to anyone. Writes are denied.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access to leaderboard data.
     */
    match /leaderboard/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to whale feed data.
     * @path /whaleFeed/{whaleTransactionId}
     * @allow (get, list) to anyone. Writes are denied.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access to whale feed data.
     */
    match /whaleFeed/{whaleTransactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}