/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access to leaderboard and whale feed data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves.
 * - /users/{userId}/alerts/{alertId}: Stores alerts created by a user. Access is restricted to the user.
 * - /users/{userId}/watchlist/{walletId}: Stores wallets followed by a user. Access is restricted to the user.
 * - /leaderboard/{leaderboardEntryId}: Stores public leaderboard data.
 * - /whaleFeed/{whaleTransactionId}: Stores public whale feed data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user emails.
 * - Public read access is granted for the leaderboard and whale feed collections.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - User-owned documents are nested under /users/{userId} to simplify ownership checks. The userId is used as a simple way to verify ownership of the data.
 *
 * Structural Segregation:
 * - Private user data (alerts, watchlist) is stored in user-specific subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) User with ID userId
     * @deny (read, write) Other users
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to alerts created by a user.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (read, write) User with ID userId
     * @deny (read, write) Other users
     * @principle Restricts access to a user's own alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to wallets followed by a user.
     * @path /users/{userId}/watchlist/{walletId}
     * @allow (read, write) User with ID userId
     * @deny (read, write) Other users
     * @principle Restricts access to a user's own watchlist.
     */
    match /users/{userId}/watchlist/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to public leaderboard data.
     * @path /leaderboard/{leaderboardEntryId}
     * @allow (read) Any user
     * @deny (write) Any user
     * @principle Allows public read access, restricts writes.
     */
    match /leaderboard/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to public whale feed data.
     * @path /whaleFeed/{whaleTransactionId}
     * @allow (read) Any user
     * @deny (write) Any user
     * @principle Allows public read access, restricts writes.
     */
    match /whaleFeed/{whaleTransactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}