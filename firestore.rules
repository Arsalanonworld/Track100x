/**
 * @fileoverview Firestore Security Rules for Tack100x Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access to leaderboard and whale feed data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   read/write their own profile.
 * - /users/{userId}/alerts/{alertId}: Stores alerts for each user. Only the
 *   authenticated user can manage their own alerts.
 * - /users/{userId}/watchlist/{walletId}: Stores watchlist for each user.
 *   Only the authenticated user can manage their own watchlist.
 * - /leaderboard/{leaderboardEntryId}: Stores public leaderboard data. Read
 *   access is public, write access is restricted.
 * - /whaleFeed/{whaleTransactionId}: Stores public whale feed data. Read access
 *   is public, write access is restricted.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} collection.
 * - Listing of all users is disallowed.
 * - Leaderboard and WhaleFeed collections are publicly readable but not writable.
 *
 * Denormalization for Authorization:
 *  - The `Alert`, `Wallet`, and `Transaction` entities contain a `userId` field,
 *    allowing for direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the requested document ID.
     * @allow (get, update, delete) - If the user is the owner of the document.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific alerts.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the alert.
     * @deny (create, get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership and restricts access to a user's own alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific watchlist.
     * @path /users/{userId}/watchlist/{walletId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the watchlist.
     * @deny (create, get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership and restricts access to a user's own watchlist.
     */
    match /users/{userId}/watchlist/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to public leaderboard data.
     * @path /leaderboard/{leaderboardEntryId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No public write access.
     * @principle Allows public read access but restricts write access.
     */
    match /leaderboard/{leaderboardEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to public whale feed data.
     * @path /whaleFeed/{whaleTransactionId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No public write access.
     * @principle Allows public read access but restricts write access.
     */
    match /whaleFeed/{whaleTransactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}