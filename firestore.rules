rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /users/{userId} collection. Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      // Verified user can only read/write their own profile
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users

      // User can only create their own profile with matching userId
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      // Existing user can update their own profile
      allow update: if isSignedIn() && isOwner(userId); // Enforce immutability of userId
      // Existing user can delete their own profile
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/alerts/{alertId} collection. Enforces user-ownership for alerts and plan-based limits.
     */
    match /users/{userId}/alerts/{alertId} {
      // Only allow access if the user is signed in and owns the parent user document
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Check alert limits on create
      allow create: if isSignedIn() && isOwner(userId) && canCreateAlert(userId);
      // Update/Delete is only allowed if the user owns the alert
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/watchlist/{walletId} collection. Enforces user-ownership and limits on the number of wallets in the watchlist based on the user's plan.
     */
    match /users/{userId}/watchlist/{walletId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && canAddToWatchlist(userId);
      allow update: if false; // Updates are not allowed on watchlist entries.
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the /leaderboard/{leaderboardEntryId} collection. Allows public read access to leaderboard data.
     */
    match /leaderboard/{leaderboardEntryId} {
      // Leaderboard is publicly readable
      allow get, list: if true;
      // No client-side writes allowed
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /whaleFeed/{whaleTransactionId} collection. Allows public read access to whale feed data.
     */
    match /whaleFeed/{whaleTransactionId} {
      // Whale feed is publicly readable
      allow get, list: if true;
      // No client-side writes allowed
      allow create, update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Check if user can create another alert based on their plan
  function canCreateAlert(userId) {
    return true;
  }

  // Check if user can add another wallet to the watchlist based on their plan
  function canAddToWatchlist(userId) {
    return true;
  }
}