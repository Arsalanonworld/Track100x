{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the WhaleWatch100x application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "username": {
          "type": "string",
          "description": "Username of the user."
        },
        "proSubscription": {
          "type": "boolean",
          "description": "Indicates whether the user has a Pro subscription."
        }
      },
      "required": [
        "id",
        "email",
        "username"
      ]
    },
    "Wallet": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Wallet",
      "type": "object",
      "description": "Represents a cryptocurrency wallet.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Wallet entity."
        },
        "address": {
          "type": "string",
          "description": "The wallet's address on the blockchain."
        },
        "blockchain": {
          "type": "string",
          "description": "The blockchain the wallet belongs to (e.g., Ethereum, Bitcoin)."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Wallet)"
        }
      },
      "required": [
        "id",
        "address",
        "blockchain",
        "userId"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a cryptocurrency transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Transaction entity."
        },
        "walletId": {
          "type": "string",
          "description": "Reference to Wallet. (Relationship: Wallet 1:N Transaction)"
        },
        "token": {
          "type": "string",
          "description": "The token involved in the transaction (e.g., ETH, BTC)."
        },
        "amount": {
          "type": "number",
          "description": "The amount of the token transferred."
        },
        "transactionType": {
          "type": "string",
          "description": "The type of transaction (e.g., deposit, withdrawal, transfer)."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the transaction.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "walletId",
        "token",
        "amount",
        "transactionType",
        "timestamp"
      ]
    },
    "Alert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Alert",
      "type": "object",
      "description": "Represents a user-defined alert for wallet activity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Alert entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Alert)"
        },
        "walletId": {
          "type": "string",
          "description": "Reference to Wallet. (Relationship: Wallet 1:N Alert)"
        },
        "alertType": {
          "type": "string",
          "description": "The type of alert (e.g., large transaction, unusual activity)."
        },
        "threshold": {
          "type": "number",
          "description": "The threshold that triggers the alert (e.g., transaction amount)."
        },
        "enabled": {
          "type": "boolean",
          "description": "Indicates whether the alert is currently enabled."
        }
      },
      "required": [
        "id",
        "userId",
        "walletId",
        "alertType",
        "threshold",
        "enabled"
      ]
    },
    "ArticleRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ArticleRecommendation",
      "type": "object",
      "description": "Represents a recommended article based on trending data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ArticleRecommendation entity."
        },
        "title": {
          "type": "string",
          "description": "Suggested title for the article."
        },
        "contentSuggestions": {
          "type": "string",
          "description": "Suggested content for the article."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the recommendation was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "contentSuggestions",
        "timestamp"
      ]
    },
    "NewsFeedItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NewsFeedItem",
      "type": "object",
      "description": "Represents a news item in the AI-curated news feed.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the NewsFeedItem entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N NewsFeedItem)"
        },
        "title": {
          "type": "string",
          "description": "Title of the news item."
        },
        "content": {
          "type": "string",
          "description": "Content of the news item."
        },
        "source": {
          "type": "string",
          "description": "Source of the news item."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the news item was added to the feed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "content",
        "source",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Follows path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wallets/{walletId}",
        "definition": {
          "entityName": "Wallet",
          "schema": {
            "$ref": "#/backend/entities/Wallet"
          },
          "description": "Stores wallets owned by a specific user. Enforces path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "walletId",
              "description": "The unique identifier for the wallet."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wallets/{walletId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transactions for a specific wallet owned by a user. Continues the ownership hierarchy.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "walletId",
              "description": "The unique identifier for the wallet."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/alerts/{alertId}",
        "definition": {
          "entityName": "Alert",
          "schema": {
            "$ref": "#/backend/entities/Alert"
          },
          "description": "Stores alerts created by a specific user for their wallets.  Enforces path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "alertId",
              "description": "The unique identifier for the alert."
            }
          ]
        }
      },
      {
        "path": "/article_recommendations/{articleRecommendationId}",
        "definition": {
          "entityName": "ArticleRecommendation",
          "schema": {
            "$ref": "#/backend/entities/ArticleRecommendation"
          },
          "description": "Stores globally available article recommendations. Security rules should restrict creation/modification to authorized services.",
          "params": [
            {
              "name": "articleRecommendationId",
              "description": "The unique identifier for the article recommendation."
            }
          ]
        }
      },
      {
        "path": "/news_feed_items/{newsFeedItemId}",
        "definition": {
          "entityName": "NewsFeedItem",
          "schema": {
            "$ref": "#/backend/entities/NewsFeedItem"
          },
          "description": "Stores news feed items, including the `userId` for personalized feeds. Includes denormalized `userId` for rule simplicity and listability.",
          "params": [
            {
              "name": "newsFeedItemId",
              "description": "The unique identifier for the news feed item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization independence is achieved through denormalization of user roles and memberships where necessary, removing the need for `get()` calls in security rules. Structural Segregation ensures that each collection has a homogeneous security posture. Access Modeling uses path-based ownership for user-specific data and membership maps for collaborative data.\n\nSpecifically:\n\n*   `/users/{userId}`: Stores user profiles. This follows Path-Based ownership, ensuring only the user can access their own profile data.\n*   `/users/{userId}/wallets/{walletId}`: Wallets belonging to a user are stored under the user's document. This structure supports simple, ownership-based security rules.\n*   `/users/{userId}/wallets/{walletId}/transactions/{transactionId}`: Transactions associated with a specific wallet are nested under the wallet. This maintains the hierarchical ownership and allows for efficient querying of transactions for a specific wallet.\n*   `/users/{userId}/alerts/{alertId}`: Alerts are associated with a user. This follows the same ownership pattern.\n*   `/news_feed_items/{newsFeedItemId}`: News feed items. Each item includes the `userId`, enabling filtering and display of news items specific to each user. Includes denormalized `userId` for rule simplicity and listability.\n*   `/article_recommendations/{articleRecommendationId}`: Globally available article recommendations.  Security rules should limit creation/modification to authorized services (e.g., backend functions or admin SDK).\n\nQAPs (Rules are not Filters) are addressed by:\n\n*   Segregating data with different access requirements into separate collections. For example, public article recommendations are stored in `/article_recommendations`, while user-specific news feed items are in `/news_feed_items`.  The `userId` field in `/news_feed_items` allows for secure listing of news items specific to a user, without requiring filtering in the rules.\n*   Using path-based ownership to implicitly control access to user-owned data (wallets, transactions, alerts).  This structure intrinsically limits queries to only the data accessible to the requesting user.\n"
  }
}